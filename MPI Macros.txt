@set here=_msgmacs/:

HOLODECK - GENERAL

)) {currentProgram} - returns the corrent program running, or 'Off' if the holodeck is off.
@set here=_msgmacs/currentProgram:{default:{prop:_holodeck/current,here},Off}

)) {dispatch} - Used for a primary program action (admin;status;list;switch;go) to call the
)) appropriate command based on the action typed.
@set here=_msgmacs/dispatch:{lexec:_holodeck/scripts/commands/{&cmd}}

)) {version} - Gets the current version number
@set here=_msgmacs/getVersion:{prop:_holodeck/version,here}

)) {isOff?} - Returns 1 if the holodeck is off, otherwise returns 0.
@set here=_msgmacs/isOff?:{eq:off,{currentProgram}}

HOLODECK - DESCRIPTIONS

)) {holodeck} - This is the default description for the holodeck room. Dispatches into the correct
)) prop to get the appropriate description. If the program is set to 'off' it fetches the holodeck's default.
@set here=_msgmacs/holodesc:{if:{isoff?},{eval:{list:_holodeck/default/desc}},<<{getname:{currentprogram}}>>{nl}{eval:{list:_holodeck/rooms/{currentProgram}/desc}{nl}}{obvExits}}

HOLODECK - ZONE AND ROOM INFORMATION

@set here=_msgmacs/getName:{if:{eq:{:1},Off},Off,{with:val,{prop:_holodeck/rooms/{:1}/name},{if:{eq:{&val},},{:1},{&val}}}}
@set here=_msgmacs/cleanName:{lcommon:{:1},{getRoomList}}

@set here=_msgmacs/getRoomList:{parse:curr,{listprops:_holodeck/rooms/,here},{subst:{&curr},_holodeck/rooms/,}}

)) {zonelist} - Scans the room list to fetch all zone properties, then sorts and removes duplicates, and returns the list.
@set here=_msgmacs/getZoneList:{lsort:{lremove:{lunique:{parse:curr,{listprops:_holodeck/rooms/,here},{prop:{&curr}/zone,here}}},\r}}

)) {getZoneRooms: zone? } - Gets a list of all rooms in the given zone.
)) 1 - zone? - (optional) The zone to get the room list for. Leave blank to get rooms without a zone (i.e., 'uncategorized' rooms.)
@set here=_msgmacs/getZoneRooms:{parse:currParse,{filter:curr,{listprops:_holodeck/rooms/,here},{eq:{prop:{&curr}/zone,here},{:1}}},{subst:{&currPArse},_holodeck/rooms/,}}

HOLODECK - MESSAGE BROADCASTING

)) {broadcast: propdir, message type, programcode, programname, suffix? )
)) Fetches a message from a prop to broadcast to the room's occupants.
)) 1 - propdir          - The property to fetch the message from
)) 2 - message type     - The type of message to fetch (activate, deactivate, switch, succ, etc)
)) 3 - programcode      - The name of the program (i.e., the one used for 'switch'.); used for substitutions
))                        in messages.
)) 4 - programname      - The long/pretty name of the program (i.e., the one used for room titles, if set);
))                        used for substitutions in messages.
)) 5 - suffix?          - (Optional) A string appeneded to the end of a given message; used only for 'o'
))                        messages to advise players some system action has taken place.
@set here=_msgmacs/broadcast:{null:{tell:{eval:{doSubsts:{prop:{:1}{:2}},{:3},{:4}}}{:5}}{otell:{eval:{doSubsts:{prop:{:1}o{:2}},{:3},{:4}}}{:5}}}
)) 
@set here=_msgmacs/mbroadcast:{broadcast:_holodeck/default/messages/,{:1},{:2},{:3}}
)) 1 - message type, 2 - programcode, 3 - programname
@set here=_msgmacs/ebroadcast:{debugif:0,{broadcast:_holodeck/rooms/{currentProgram}/exits/{:1}/,{:2},{:3},{:4}, ((New description))}}

)) 1 - exit name, 2 - message type, 3 - programcode, 4 - programname
@set here=_msgmacs/doExitMsg:{func:exitHlpr,exitName,msgType,pcode,pname,{lexec:_holodeck/scripts/functions/doExitMsg,here}}{exitHlpr:{:1},{:2},{:3},{:4}}
lsedit here=_holodeck/scripts/functions/doExitMsg
.del 1 999
{with:succMsg,{prop:_holodeck/rooms/{currentProgram}/exits/{&exitName}/{&msgType}},
    {if:{eq:{&succMsg},},{set:succMsg,You take the exit '{&exitName}'.}}
    {with:oSuccMsg,{prop:_holodeck/rooms/{currentProgram}/exits/{&exitName}/o{&msgType}},
        {if:{eq:{&oSuccMsg},},{set:oSuccMsg,{name:me} takes the exit '{&exitName}'.}}
        {set:oSuccMsg,{&oSuccMsg} ((New room description))}
        {tell:{pronouns:{eval:{doSubsts:{&succMsg},{&pcode},{&pname}}}}}
        {otell:{pronouns:{eval:{doSubsts:{&oSuccMsg},{&pcode},{&pname}}}}}
    }
}
.end

// 1 - input string, 2 - program code, 3 - programname
@set here=_msgmacs/doSubsts:{subst:{subst:{:1},%programcode,{:2}},%programname,{:3}}

HOLODECK - EXITS

@set here=_msgmacs/getExits:{parse:curr,{listprops:_holodeck/rooms/{:1}/exits,here},{sublist:{subst:{&curr},_holodeck/rooms/{:1}/exits/,},1,1,;}}
@set here=_msgmacs/getFullExits:{parse:curr,{listprops:_holodeck/rooms/{:1}/exits,here},{subst:{&curr},_holodeck/rooms/{:1}/exits/,}}
@set here=_msgmacs/fmtExits:{commas:{getExits:{currentProgram}}, and ,curr,{&curr}}
@set here=_msgmacs/obvExits:{with:fExits,{fmtExits},{if:{&fExits},[ Obvious Exits: {&fExits} ]}}

)) {findExit: room, exit } - Searched the given room to find the full name for the specified exit
))                           Returns null if no exit is found.
)) 1 - room         - the room to search
)) 2 - exit         - the exit name you're searching for
@set here=_msgmacs/findExit:{fold:l,r,\r{getFullExits:{:1}},{if:{and:{not:{&l}},{lmember:{&r},{:2},;}},{&r},{&l}}}

=====
{fold:l,r,\r{getFullExits:{:1}},
    {if:
        {and:{not:{&l}},{lmember:{&r},{:2},;}},
        {&r},
        {&l}
    }
}

=====

)) {findExitProp: room, exit, propname, default? } - Searched the given room to find the specifid exit,
))                                                   and then return the specified prop. Returns "" or
))                                                   the specified default if nothing is found.
)) Returns null if no exit is found.
)) 1 - room         - the room to search
)) 2 - exit         - the exit name you're searching for
)) 3 - propname     - The prop name you're attempting to retrieve
)) 4 - default?     - (Optional) The value to return if nothing is found.
@set here=_msgmacs/findExitProp:{fold:l,r,{:4}\r{getFullExits:{:1}},{if:{and:{eq:{&l},{:4}},{lmember:{&r},{:2},;}},{prop:_holodeck/rooms/{:1}/exits/{&r}/{:3},here},{&l}}}

// So this is the setup; our seed values are our default and the first list item
// So if the left item is the default, and the right value contains our search return, we want to return the right specified
// Otherwise we want to just return the left hand specified
{fold:l,r,{:4}\r{getFullExits:{:1}},
    {if:
        {and:{eq:{&l},{:4}},{lmember:{&r},{:2},;}},
        {prop:_holodeck/rooms/{:1}/exits/{&r}/{:3},here},
        {&l}
    }
}

)) {findExitProp2: room, exit, propname, variable, default? } - Searched the given room to find the specifid exit,
))                                                              and then return the specified prop. Returns "" or
))                                                              the specified default if nothing is found.
)) Returns null if no exit is found.
)) 1 - room         - the room to search
)) 2 - exit         - the exit name you're searching for
)) 3 - propname     - The prop name you're attempting to retrieve
)) 4 - variable     - The name of a variable you want to save the full exit name to
)) 5 - default?     - (Optional) The value to return if nothing is found.
@set here=_msgmacs/findExitProp2:{fold:l,r,{:5}\r{getFullExits:{:1}},{if:{and:{eq:{&l},{:5}},{lmember:{&r},{:2},;}},{prop:_holodeck/rooms/{:1}/exits/{&r}/{:3},here}{null:{set:{:4},{&r}}},{&l}}}


// So this is the setup; our seed values are our default and the first list item
// So if the left item is the default, and the right value contains our search return, we want to return the right specified
// Otherwise we want to just return the left hand specified
{fold:l,r,{:5}\r{getFullExits:{:1}},
    {if:
        {and:{eq:{&l},{:5}},{lmember:{&r},{:2},;}},
        {prop:_holodeck/rooms/{:1}/exits/{&r}/{:3},here}
        {null:{set:{:4},{&r}}},
        {&l}
    }
}


)) {getExitProp: room, exit, propname, default?} - Retrieves the specified exit for the given room, exit, and prop name.
)) 1 - room     - The room containing the exit to retrieve the prop from
)) 2 - exit     - The exit name to get the value from - must be the full name.
)) 3 - propname - The prop name to retrieve a value for
)) 4 - default? - (Optional) A default value to return if the specified value isn't found
@set here=_msgmacs/getExitProp:{default:{prop:_holodeck/rooms/{:1}/exits/{:2}/{:3}, here},{:4}}


HOLODECK - DETAIL FUNCTIONS

@set here=_msgmacs/clearDetails:{delprop:_details,{getdbref}}

@set here=_msgmacs/copyDetails:{func:cpyDetHlpr,pcode,{lexec:_holodeck/scripts/functions/copyDetails,here}}{cpyDetHlpr:{:1}}
lsedit here=_holodeck/scripts/functions/copyDetails
.del 1 999
{clearDetails}
{with:dets,{parse:curr,{listprops:_holodeck/rooms/{&pcode}/details,here},{subst:{&curr},_holodeck/rooms/{&pcode}/details/,}},
    {foreach:curr,{&dets},
        {store:{prop:_holodeck/rooms/{&pcode}/details/{&curr},here},_details/{&curr},here}
    }
}
{with:exits,{getExits:{&pcode}},
    {with:currentDetail,"",
        {foreach:currExit,{&exits},
            {set:currentDetail,
                {prop:_holodeck/rooms/{&pcode}/exits/{&currExit}/detail,here}
            }
            {if:{eq:{&currentDetail},},
                {set:currentDetail,You see the exit for '{&currExit}' that leads to '{cleanName:{prop:_holodeck/rooms/{&pcode}/exits/{&currExit}/dest,here}}'.}
            }
            {store:{&currentDetail},_details/{&currExit},here}
        }
    }
}
.end


HOLODECK - ADMIN FUNCTIONS

@set here=_msgmacs/isAdmin?:{or:{dbeq:{owner:here},me},{if:{lmember:{listprops:_holodeck,here},_holodeck/adminlock},{testlock:here,_holodeck/adminlock,me}}}

)) {genExitList} - Generates a full exit list for all the rooms
// So first we would need to get all the rooms, and then get all the exits from those rooms


@set here=_msgmacs/genExitList:{with:gelExitList,{list:_holodeck/admin/realexits,here},{with:gelList,{subst:{lunique:{subst:{fold:l,r,\r{listprops:_holodeck/rooms/,here},{if:{&l},{&l}\r}{subst:{listprops:{&r}/exits/,here},{&r}/exits/,}},;,\r}},\r,;},{if:{gt:{strlen:{&gelList}},1000},{null:{tell:>>> List is greater than 1000 characters; you may need to split this into multiple exits.}}}{if:{eq:{strlen:{&gelList}},4095},{null:{tell:>>> Maximum line length reached! All exits may not have been correctly captured!}}}{null:{tell:@name {dequeue:gelExitList}={&gelList}}}}}



{with:gelExitList,{list:_holodeck/admin/realexits,here},
{with:gelList,
    {subst:
        {lunique:
            {subst:
                {fold:l,r,\r{listprops:_holodeck/rooms/,here},
                    {if:{&l},{&l}\r}{subst:{listprops:{&r}/exits/,here},{&r}/exits/,}
                },
                ;,
                \r
            }
        },
        \r,
        ;
    },
    // So from here we can output a string list. Add a warning in case the list goes way too long.
    // TODO: I'll worry about the actual splitting later when I need it. For now I just want it done.
    {if:{gt:{strlen:{&gelList}},1000},
        {null:{tell:>>> List is greater than 1000 characters; you may need to split this into multiple exits.}}
    }
    {if:{eq:{strlen:{&gelList}},4095},
        {null:{tell:>>> Maximum line length reached! All exits may not have been correctly captured!}}
    }
    // Now that the warnings are out of the way
    {null:{tell:@name {dequeue:gelExitList}={&gelList}}}
}
}

// So at certain intervals we'd want to compress the list, and at
// another threshold we'd want to actually peel off items and emit an exit list
// Actually if I don't do that right then I'll do it repeatedly. So I should do that all in one step
// So what's my threshold? I'll say 3000, just to be safe.
// But I'm not going to bother with this now, since I don't have that many rooms.
I'll implement this later when I get more and I can efficiently test it.



}} {dequeue: variable} - Takes the list stored in the variable and removes the first element.
)) 1 - variable - The variable the list is stored in.
@set here=_msgmacs/dequeue:{sublist:{&{:1}},1}{null:{if:{gt:{count:{&{:1}}},1},{set:{:1},{sublist:{&{:1}},2,-1}},{set:{:1},}}}
=====
{sublist:{&{:1}},1}
{null:
    {if:{gt:{count:{&{:1}}},1},
        {set:{:1},{sublist:{&{:1}},2,-1}},
        {set:{:1},}
    }
}
=====

)) {peelOffExits: exitlist} - parses an exit list into multiple strings that can actually be set.

=====
{with:lines,,
    {with:remInput,,
    {null:
        // Let's try it this way.
        // While our remaining input is greater than our wrap width.
        {while:{gt:{strlen:{&remInput}},900},
            {with:tStr,{midstr:{&remInput},1,{add:900+,1}},
                // I have my temporary string. Now I need to find my next chunk.\
                // If there is a space, we get that index. If there's /no/ space, then we get the full width.
            {with:tStart,{rinstr:{&tStr},;},
            {with:tEnd,0,
                {if:{&tStart},
                    {dec:tStart}
                    {set:tEnd,{add:{&tStart},2}},
                    {set:tStart,{:2}}
                    {set:tEnd,{add:{:2},1}}
                }
                {set:lines,{mklist:{&lines},{midstr:{&remInput},1,{&tstrt}}}}
                {set:remInput,{strip:{midstr:{&remInput},{&tEnd},-1}}},
            }
            }
            }
        }
        {set:lines,{mkList:{&lines},{&remInput}}}
    }
    }
    {&lines}
}
=====



HOLODECK - AUTOSHUTDOWN

@set here=_msgmacs/getDbref:{prop:_holodeck/dbref}
@set here=_msgmacs/anyAwake?:{fold:l,r,0\r{contents:{getdbref},player},{add:{&l},{awake:{&r}}}}

@set here=_msgmacs/autoshutdown:{null:{if:{not:{anyAwake?}},{clearDetails}{store:off,_holodeck/current,{getdbref}}}}

GUI MACROS

@set here=_msgmacs/gui/Header:{null:{tell:{gui/header2:{:1}}}}
@set here=_msgmacs/gui/Header2:/{center:{if:{:1},[  {:1}  ]},{subt:{default:{:2},80},2},-}\\
@set here=_msgmacs/gui/Footer:{null:{tell:{gui/footer2:{:1}}}}
@set here=_msgmacs/gui/Footer2:\\{center:{if:{:1},[  {:1}  ]},{subt:{default:{:2},80},2},-}/
@set here=_msgmacs/gui/LRBorder:{with:lrbw,{subt:{default:{:4},80},{strlen:{:2}},{strlen:{:3}}},{null:{foreach:lrbCurr,{:1},{tell:{:2}{left:{&lrbCurr},{&lrbw}}{:3}}}}}
        {with:lrbw,{subt:{default:{:4},80},{strlen:{:2}},{strlen:{:3}}},{foreach:curr,
            {:1},
            {tell:{:2}{left:{&curr},{&lrbw}}{:3}}}
        }}

)) {gui/JagSep: width? } - Draws a jagged line separator.
)) 1 - width?   - (Optional) the width of the field to draw too. Default is 80.
@set here=_msgmacs/gui/JagSep:{null:{tell:{gui/jagSep2:{:1}}}}

)) {gui/JagSep2: width? } - Creates a jagged seprator line but does not emit it.
)) 1 - width?   - (Optional) the width of the field to draw too. Default is 80.
@set here=_msgmacs/gui/JagSep2:{center:,{default:{:1},80},/\\}

STRING MACROS

)) 1 - the list to join, 2 - the text to join with, 3? - list separator, defaults to \r
@set here=_msgmacs/ljoin:{subst:{:1},{sep?:{:3}},{:2}}

)) 1 - the list to pad, 2 - the length to pad out, 3? - the text to pad with; defaults to " ", 4? - seperator, defaults to "\r"
@set here=_msgmacs/lPad:{with:plList,{:1},{null:{for:i,1,{subt:{:2},{count:{:1},{default:{:4},\r}}},1,{set:plList,{&plList}{default:{:4},\r}{default:{:3}, }}        }    }{&plList}}


@set here=_msgmacs/pad?:{default:{:1},{:2}}

@set here=_msgmacs/rinstr:{with:rinstrResult,{instr:{rstr:{:1}},{rstr:{:2}}},{if:{&rinstrResult},{add:{subt:{strlen:{:1}},{&rinstrResult},{strlen:{:2}}},2},0}}
@set here=_msgmacs/rstr:{midstr:{:1},-1,1}

@set here=_msgmacs/sep?:{default:{:1},\r}

@set here=_msgmacs/str/TakeFirst:{midstr:{strip:{:1}},1,{subt:{instr:{strip:{:1}},{if:{:2},{:2}, }},1}}
@set here=_msgmacs/str/TakeRest:{midstr:{strip:{:1}},{add:{instr:{strip:{:1}},{if:{:2},{:2}, }},1},{strlen:{strip:{:1}}}}

)) 1  - The list to print
)) 2  - Total width to print to
)) 3  - Number of columns to print
)) 4  - left margin
)) 5  - column padding
)) 6? - right margin (defaults to mirror of left column)
@set here=_msgmacs/varColPrnt:{func:varPrntHlper,vcpList,width,colCount,lMargin,cMargin,rMargin,{lexec:_holodeck/scripts/functions/varColPrnt,here}}{varPrntHlper:{:1},{:2},{:3},{:4},{:5},{:6}}
lsedit here=_holodeck/scripts/functions/varColPrnt
.del 1 999
{null:
{set:rMargin,{default:{&rMargin},{rstr:{&lMargin}}}}
{with:colWidth,{div:{subt:{&width},{strlen:{&lMargin}},{strlen:{&rMargin}},{mult:{subt:{&colCount},1},{strlen:{&cMargin}}}},{&colCount}},
    {with:rowCount,{div:{subt:{count:{&vcpList}},1},{&colCount}},
        {set:vcpList,{lPad:{&vcpList},{mult:{add:{&rowCount},1},{&colCount}}}}
        {set:vcpList,{parse:currRoom,{&vcpList},{center:{&currRoom},{&colWidth}}}}
        {for:i,0,{&rowCount},1,
            {tell:
                {&lMargin}
                {center:
                    {ljoin:
                        {sublist:{&vcpList},
                            {add:{mult:{&i},{&colCount}},1},
                            {mult:{add:{&i},1},{&colCount}}
                        },
                        {&cMargin}
                    },
                    {subt:{&width},{strlen:{&lMargin}},{strlen:{&rMargin}}}
                }
                {&rMargin}
            }
        }
    }
}
}
.end

)) 1  - The list to print
)) 2  - Total width to print to
)) 3  - Number of columns to print
)) 4  - left margin
)) 5  - column padding
)) 6? - right margin (defaults to mirror of left column)
@set here=_msgmacs/varColPrntL:{func:varPrntLHlper,vcpList,width,colCount,lMargin,cMargin,rMargin,{lexec:_holodeck/scripts/functions/varColPrntL,here}}{varPrntLHlper:{:1},{:2},{:3},{:4},{:5},{:6}}
lsedit here=_holodeck/scripts/functions/varColPrntL
.del 1 999
{null:
{set:rMargin,{default:{&rMargin},{rstr:{&lMargin}}}}
{with:colWidth,{div:{subt:{&width},{strlen:{&lMargin}},{strlen:{&rMargin}},{mult:{subt:{&colCount},1},{strlen:{&cMargin}}}},{&colCount}},
    {with:rowCount,{div:{subt:{count:{&vcpList}},1},{&colCount}},
        {set:vcpList,{lPad:{&vcpList},{mult:{add:{&rowCount},1},{&colCount}}}}
        {set:vcpList,{parse:currRoom,{&vcpList},{left:{&currRoom},{&colWidth}}}}
        {for:i,0,{&rowCount},1,
            {tell:
                {&lMargin}
                {center:
                    {ljoin:
                        {sublist:{&vcpList},
                            {add:{mult:{&i},{&colCount}},1},
                            {mult:{add:{&i},1},{&colCount}}
                        },
                        {&cMargin}
                    },
                    {subt:{&width},{strlen:{&lMargin}},{strlen:{&rMargin}}}
                }
                {&rMargin}
            }
        }
    }
}
}
.end

This is the general word wrap functions
1 - The string to break apart
2 - The width to wrap to
@set here=_msgmacs/wordwrap:{with:lines,,{with:remInput,{strip:{:1}},{null:{while:{gt:{strlen:{&remInput}},{:2}},{with:tStr,{midstr:{&remInput},1,{add:{:2},1}},{with:tStrt,{rinstr:{&tStr}, },{with:tend,0,{if:{&tstrt},{dec:tstrt}{set:tend,{add:{&tstrt},2}},{set:tStrt,{:2}}{set:tEnd,{add:{:2},1}}}{set:lines,{mklist:{&lines},{midstr:{&remInput},1,{&tstrt}}}}{set:remInput,{strip:{midstr:{&remInput},{&tEnd},-1}}},}}}}{set:lines,{mkList:{&lines},{&remInput}}}}}{&lines}}

{with:lines,,
    {with:remInput,{strip:{:1}},
    {null:
        // Let's try it this way.
        // While our remaining input is greater than our display width.
        {while:{gt:{strlen:{&remInput}},{:2}},
            {with:tStr,{midstr:{&remInput},1,{add:{:2},1}},
                // I have my temporary string. Now I need to find my next chunk.\
                // If there is a space, we get that index. If there's /no/ space, then we get the full width.
            {with:tStrt,{rinstr:{&tStr}, },
            {with:tend,0,
                {if:{&tstrt},
                    {dec:tstrt}
                    {set:tend,{add:{&tstrt},2}},
                    {set:tStrt,{:2}}
                    {set:tEnd,{add:{:2},1}}
                }
                {set:lines,{mklist:{&lines},{midstr:{&remInput},1,{&tstrt}}}}
                {set:remInput,{strip:{midstr:{&remInput},{&tEnd},-1}}},
            }
            }
            }
        }
        {set:lines,{mkList:{&lines},{&remInput}}}
    }
    }
    {&lines}
}