@set here=_holodeck/version:0.1.0

lsedit here=_holodeck/scripts/commands/admin
.del 1 999
{null:
	{if:{not:{isAdmin?:me}},
        {tell:{lit:The computer lets out a buzzing sound, and a robotic voice says,}
            {lit: "I'm sorry, you do not have access to the admin functionalities here."}},
        {tell:Cmd 'admin' - Arg [{&arg}]! First is [{str/takefirst:{&arg}}]}
    }
}
.end

lsedit here=_holodeck/scripts/commands/status
.del 1 999
{null:
    {tell:
        [Holodeck Status]{nl}
        {lit: }{nl}
        {if:{isOff?},
            The holodeck is currently off!{nl}
            Use 'list' to find a program to run\, and 'switch <program>' to run it!,
            You are currently running: {getName:{currentProgram}} ({currentProgram}){nl}
            The available exits are: {fmtExits}{nl}
            You can use 'go <exit name>' to move to that room.
        }
	}
}
.end

lsedit here=_holodeck/scripts/commands/list
.del 1 999
{null:
    {tell:{nl}{drawtopBorder:Holodeck Program Listing}{nl}}
    {tell:|{center:,78}|}
    {with:maxLength,0,
    {with:columnNum,0,
    {with:maxSectCount,0,
        {foreach:curr, {getRoomList},
            {set:maxlength,{max:{&maxlength},{strlen:{&curr}}}}
        }
        {foreach:currZone,{getZoneList},
            {set:maxSectCount,{max:{&maxSectCount},{count:{getZoneRooms:{&currZone}}}}}
        }
        {set:maxSectCount, {max:{&maxSectCount},{count:{getZoneRooms}}}}

        {set:columnNum,{div:76,{&maxLength}}}
        {null:This is checking if I have enough space for the padding between names.}
        {null: {76 - (columnNum * maxLength)} < (columnNum - 1) * 3 }
        {if:
            {lt:{subt:76,{mult:{&columnNum},{&maxLength}}},{mult:{subt:{&columnNum},1},2}},
            {dec:columnNum}
        }
        {set:columnNum,{min:{&maxSectCount},{&columnNum}}}

        {foreach:currZone,{getZoneList},
            {tell:|{center:*  {&currZone} Zone  *,78, }|}
            {tell:|{center:,78}|}
            {null:|{center:,78}|}
            {null:| {center:{center:,{strlen:{&currZone}},~},76} |}
            {varColPrnt:{getZoneRooms:{&currZone}},80,{&columnNum},| ,  , |}
            {tell:|{center:,78}|}
            {null:+{center:,78,-}+}
        }
        {if:{count{getZoneRooms}},
            {tell:|{center:(  Uncategorized  ),78, }|}
            {null:|{center:,78}|}
            {null:| {center:{center:,{strlen:(Uncategorized)},~},76} |}
            {varColPrnt:{getZoneRooms},80,{&columnNum},| ,  , |}
        }
        {tell:|{center:,78}|}
        {tell:{drawBotBorder:switch <program name>}}
    }
    }
    }
}
.end



lsedit here=_holodeck/scripts/commands/switch
.del 1 999
{null:
    {set:arg,{strip:{&arg}}}
	{if:
        {eq:{&arg},},
        {tell:
            > Syntax for switch is:{nl}
            > switch off:       Turn the holodeck off.{nl}
            > switch <program>: Switch to the specified program.{nl}
        },
        {if:
            {eq:{&arg},off},
            {if:
                {eq:{currentProgram},off},
                {tell:
                    > The holodeck is already off!
                },
                {clearDetails}
                {store:off,_holodeck/current,here}
                {mbroadcast:deactivate,Off,Off}
            },
            {if:
                {not:{propdir:_holodeck/rooms/{&arg},here}},
                {tell:> That program doesn't exist! Type 'list' to see all the programs.},
                {if:
                    {eq:{currentProgram},{&arg}},
                    {tell:> Error! Holodeck is already set to that program.},
                    {set:arg,{cleanName:{&arg}}}
                    {if:
                        {isOff?},
                        {mbroadcast:activate,{&arg},{getname:{&arg}}},
                        {mbroadcast:switch,{&arg},{getname:{&arg}}}
                    }
                    {copyDetails:{&arg}}
                    {store:{&arg},_holodeck/current,here}
                    
                }
            }
        }
    }
}
.end



lsedit here=_holodeck/scripts/commands/go
.del 1 999
{null:
    {set:arg,{strip:{&arg}}}
    {if:
        {eq:{&arg},},
        {tell:> Where do you want to go? (type 'go <exit>' to change locations.)},
        {if:
            {isOff?},
            {tell:> The holodeck is off! You can switch it on with 'switch <program>'.},
            {if:
                {not:{lmember:{getExits:{currentProgram}},{&arg}}},
                {tell:> That isn't a valid exit!},
                {with:dest,{prop:_holodeck/rooms/{currentProgram}/exits/{&arg}/dest,here},
                    {if:
                        {or:
                            {eq:{&dest},},
                            {not:{propdir:_holodeck/rooms/{&dest},here}}
                        },
                        {tell:> Error! We're sorry\, the exit '{&arg}' on program '{currentProgram}' leads to an invalid destination of '{&dest}'.{nl}
                                > Please report this to {name:{owner:here}}.},
                        {set:dest,{cleanName:{&dest}}}
                        {doExitMsg:{&arg},succ,{currentProgram},{getName:{currentProgram}}}
                        {copyDetails:{&dest}}
                        {store:{&dest},_holodeck/current,here}
                        {tell:{holodesc}}
                    }
                }
            }
        }
    }
}
.end